import subprocess

# Run the 'aws s3 ls' command for a given bucket
bucket_name = 's3://your-bucket-name/'
result = subprocess.run(['aws', 's3', 'ls', bucket_name, '--recursive'], capture_output=True, text=True)

# Store the output
output = result.stdout

files = []

# Split the output into lines
for line in output.splitlines():
    # Split the line by spaces to extract the date, time, size, and filename
    parts = line.split()

    # If the line contains a file (i.e., 4 or more parts), extract the size and filename
    if len(parts) >= 4:
        size = int(parts[2])
        filename = ' '.join(parts[3:])  # Join the remaining parts as filename (in case it has spaces)

        # Keep only files with size > 0
        if size > 0:
            files.append((filename, size))

# Print or process the filtered files
for filename, size in files:
    print(f"File: {filename}, Size: {size} bytes")

import pandas as pd
from hypothesis import given
import hypothesis.strategies as st

# Define a strategy to generate a pd.Period object
period_strategy = st.builds(pd.Period, st.integers(min_value=1900, max_value=2100), st.sampled_from(['Y', 'M', 'D']))

# Use hypothesis to test generation of a DataFrame with a Period column
@given(st.data())
def test_period_column(data):
    # Generate a list of pd.Period objects
    periods = data.draw(st.lists(period_strategy, min_size=1, max_size=10))
    
    # Create a DataFrame with the generated periods
    df = pd.DataFrame({"period_column": periods})
    
    print(df)

# Run the test
test_period_column()
