import pytest
import pandas as pd
import numpy as np
from hypothesis import given
from hypothesis import strategies as st

# Hypothesis strategies for generating random test data
@given(
    customerrate=st.floats(min_value=0, max_value=10),
    followonrate=st.one_of(st.none(), st.floats(min_value=0, max_value=10)),  # Could be NaN or a float
    base_rate_obs=st.floats(min_value=0, max_value=5),
    base_rate=st.floats(min_value=0, max_value=5),
    repricing_end_date_is_na=st.booleans(),
    rate_type_is_fixed=st.booleans(),
    event_time_gt_repricing_end_date=st.booleans(),
    follow_on_rate_type_is_fx=st.booleans(),
)
def test_customerrate_dynamic(
    customerrate, followonrate, base_rate_obs, base_rate,
    repricing_end_date_is_na, rate_type_is_fixed, 
    event_time_gt_repricing_end_date, follow_on_rate_type_is_fx):
    
    # Create a mock dataframe with the relevant fields
    df = pd.DataFrame({
        'customerrate': [customerrate],
        'followonrate': [followonrate],
        'base_rate_obs': [base_rate_obs],
        'base_rate': [base_rate]
    })
    
    # Run the logic we're testing
    customerrate_dynamic = utils.SWITCH_IF(
        (repricing_end_date_is_na & rate_type_is_fixed, df['customerrate'][0]),
        (repricing_end_date_is_na & (~rate_type_is_fixed), df['customerrate'][0] - df['base_rate_obs'][0] + df['base_rate'][0]),
        ((~event_time_gt_repricing_end_date) & rate_type_is_fixed, df['customerrate'][0]),
        ((~event_time_gt_repricing_end_date) & (~rate_type_is_fixed), df['customerrate'][0] - df['base_rate_obs'][0] + df['base_rate'][0]),
        (event_time_gt_repricing_end_date & follow_on_rate_type_is_fx & pd.isna(df['followonrate'][0]), df['customerrate'][0]),
        (event_time_gt_repricing_end_date & follow_on_rate_type_is_fx & (~pd.isna(df['followonrate'][0])), df['followonrate'][0]),
        (event_time_gt_repricing_end_date & (~follow_on_rate_type_is_fx) & pd.isna(df['followonrate'][0]), df['customerrate'][0] - df['base_rate_obs'][0] + df['base_rate'][0]),
        (event_time_gt_repricing_end_date & (~follow_on_rate_type_is_fx) & (~pd.isna(df['followonrate'][0])), df['followonrate'][0] - df['base_rate_obs'][0] + df['base_rate'][0]),
        default=None,
    )

    # Expected results based on the logic and random data
    if repricing_end_date_is_na and rate_type_is_fixed:
        expected = customerrate
    elif repricing_end_date_is_na and not rate_type_is_fixed:
        expected = customerrate - base_rate_obs + base_rate
    elif not event_time_gt_repricing_end_date and rate_type_is_fixed:
        expected = customerrate
    elif not event_time_gt_repricing_end_date and not rate_type_is_fixed:
        expected = customerrate - base_rate_obs + base_rate
    elif event_time_gt_repricing_end_date and follow_on_rate_type_is_fx and pd.isna(followonrate):
        expected = customerrate
    elif event_time_gt_repricing_end_date and follow_on_rate_type_is_fx and not pd.isna(followonrate):
        expected = followonrate
    elif event_time_gt_repricing_end_date and not follow_on_rate_type_is_fx and pd.isna(followonrate):
        expected = customerrate - base_rate_obs + base_rate
    elif event_time_gt_repricing_end_date and not follow_on_rate_type_is_fx and not pd.isna(followonrate):
        expected = followonrate - base_rate_obs + base_rate
    else:
        expected = None

    # Assert that the dynamic customerrate matches the expected result
    assert customerrate_dynamic == expected
